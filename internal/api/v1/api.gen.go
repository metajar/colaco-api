// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Soda Represents a soda available for purchase, including metadata such as name, description, origin story, calories, and volume in ounces. This schema is used to detail the sodas offered by the vending machine, allowing users to make informed choices.
type Soda struct {
	Calories    *int     `json:"calories,omitempty"`
	Description *string  `json:"description,omitempty"`
	Name        *string  `json:"name,omitempty"`
	OriginStory *string  `json:"originStory,omitempty"`
	Ounces      *float32 `json:"ounces,omitempty"`
}

// VendingSlot Defines a slot within the vending machine, containing a soda, its cost, maximum quantity, and current stock level. This schema is crucial for managing the inventory and pricing of sodas, ensuring a seamless vending operation.
type VendingSlot struct {
	Cost        *float32 `json:"cost,omitempty"`
	MaxQuantity *int     `json:"maxQuantity,omitempty"`

	// OccupiedSoda Represents a soda available for purchase, including metadata such as name, description, origin story, calories, and volume in ounces. This schema is used to detail the sodas offered by the vending machine, allowing users to make informed choices.
	OccupiedSoda *Soda `json:"occupiedSoda,omitempty"`
	Quantity     *int  `json:"quantity,omitempty"`
}

// AuthTokenResponse defines model for AuthTokenResponse.
type AuthTokenResponse struct {
	Token *string `json:"token,omitempty"`
}

// ErrorResp defines model for ErrorResp.
type ErrorResp struct {
	Error *string `json:"error,omitempty"`
}

// MessageResponse defines model for MessageResponse.
type MessageResponse struct {
	Message *string `json:"message,omitempty"`
}

// PurchaseSodaResponse defines model for PurchaseSodaResponse.
type PurchaseSodaResponse struct {
	Change *float32 `json:"change,omitempty"`

	// Soda Represents a soda available for purchase, including metadata such as name, description, origin story, calories, and volume in ounces. This schema is used to detail the sodas offered by the vending machine, allowing users to make informed choices.
	Soda *Soda `json:"soda,omitempty"`
}

// RestockResponse defines model for RestockResponse.
type RestockResponse struct {
	Leftover    *int `json:"leftover,omitempty"`
	NewQuantity *int `json:"newQuantity,omitempty"`
	OldQuantity *int `json:"oldQuantity,omitempty"`
}

// UpdatePriceResp defines model for UpdatePriceResp.
type UpdatePriceResp struct {
	NewPrice *float32 `json:"newPrice,omitempty"`
	OldPrice *float32 `json:"oldPrice,omitempty"`
	SlotName *string  `json:"slotName,omitempty"`
}

// VendingMachineResponse defines model for VendingMachineResponse.
type VendingMachineResponse struct {
	Slots *[]VendingSlot `json:"slots,omitempty"`
	Total *int           `json:"total,omitempty"`
}

// AuthRequestBody defines model for AuthRequestBody.
type AuthRequestBody struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// NewVendingSlotRequestBody defines model for NewVendingSlotRequestBody.
type NewVendingSlotRequestBody struct {
	// Slot Defines a slot within the vending machine, containing a soda, its cost, maximum quantity, and current stock level. This schema is crucial for managing the inventory and pricing of sodas, ensuring a seamless vending operation.
	Slot VendingSlot `json:"slot"`
}

// PurchaseSodaBody defines model for PurchaseSodaBody.
type PurchaseSodaBody struct {
	Name    string  `json:"name"`
	Payment float32 `json:"payment"`
}

// RestockRequestBody defines model for RestockRequestBody.
type RestockRequestBody struct {
	Name     string `json:"name"`
	Quantity int    `json:"quantity"`
}

// UpdatePriceBody defines model for UpdatePriceBody.
type UpdatePriceBody struct {
	Name     string  `json:"name"`
	NewPrice float32 `json:"newPrice"`
}

// VendingSlotRequestBody defines model for VendingSlotRequestBody.
type VendingSlotRequestBody struct {
	Name string `json:"name"`
}

// AuthLoginJSONBody defines parameters for AuthLogin.
type AuthLoginJSONBody struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// PostPurchaseJSONBody defines parameters for PostPurchase.
type PostPurchaseJSONBody struct {
	Name    string  `json:"name"`
	Payment float32 `json:"payment"`
}

// RestockSodaJSONBody defines parameters for RestockSoda.
type RestockSodaJSONBody struct {
	Name     string `json:"name"`
	Quantity int    `json:"quantity"`
}

// UpdatePriceJSONBody defines parameters for UpdatePrice.
type UpdatePriceJSONBody struct {
	Name     string  `json:"name"`
	NewPrice float32 `json:"newPrice"`
}

// DeleteVendingJSONBody defines parameters for DeleteVending.
type DeleteVendingJSONBody struct {
	Name string `json:"name"`
}

// GetVendingJSONBody defines parameters for GetVending.
type GetVendingJSONBody struct {
	Name string `json:"name"`
}

// PostNewJSONBody defines parameters for PostNew.
type PostNewJSONBody struct {
	// Slot Defines a slot within the vending machine, containing a soda, its cost, maximum quantity, and current stock level. This schema is crucial for managing the inventory and pricing of sodas, ensuring a seamless vending operation.
	Slot VendingSlot `json:"slot"`
}

// AuthLoginJSONRequestBody defines body for AuthLogin for application/json ContentType.
type AuthLoginJSONRequestBody AuthLoginJSONBody

// PostPurchaseJSONRequestBody defines body for PostPurchase for application/json ContentType.
type PostPurchaseJSONRequestBody PostPurchaseJSONBody

// RestockSodaJSONRequestBody defines body for RestockSoda for application/json ContentType.
type RestockSodaJSONRequestBody RestockSodaJSONBody

// UpdatePriceJSONRequestBody defines body for UpdatePrice for application/json ContentType.
type UpdatePriceJSONRequestBody UpdatePriceJSONBody

// DeleteVendingJSONRequestBody defines body for DeleteVending for application/json ContentType.
type DeleteVendingJSONRequestBody DeleteVendingJSONBody

// GetVendingJSONRequestBody defines body for GetVending for application/json ContentType.
type GetVendingJSONRequestBody GetVendingJSONBody

// PostNewJSONRequestBody defines body for PostNew for application/json ContentType.
type PostNewJSONRequestBody PostNewJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AuthLoginWithBody request with any body
	AuthLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthLogin(ctx context.Context, body AuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPurchaseWithBody request with any body
	PostPurchaseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPurchase(ctx context.Context, body PostPurchaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RestockSodaWithBody request with any body
	RestockSodaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RestockSoda(ctx context.Context, body RestockSodaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePriceWithBody request with any body
	UpdatePriceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePrice(ctx context.Context, body UpdatePriceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVendingWithBody request with any body
	DeleteVendingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteVending(ctx context.Context, body DeleteVendingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVendingWithBody request with any body
	GetVendingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetVending(ctx context.Context, body GetVendingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostNewWithBody request with any body
	PostNewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostNew(ctx context.Context, body PostNewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AuthLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthLogin(ctx context.Context, body AuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPurchaseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPurchaseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPurchase(ctx context.Context, body PostPurchaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPurchaseRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RestockSodaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRestockSodaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RestockSoda(ctx context.Context, body RestockSodaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRestockSodaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePriceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePriceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePrice(ctx context.Context, body UpdatePriceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePriceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVendingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVendingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVending(ctx context.Context, body DeleteVendingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVendingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVendingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVendingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVending(ctx context.Context, body GetVendingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVendingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNewRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNew(ctx context.Context, body PostNewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNewRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAuthLoginRequest calls the generic AuthLogin builder with application/json body
func NewAuthLoginRequest(server string, body AuthLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthLoginRequestWithBody generates requests for AuthLogin with any type of body
func NewAuthLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPurchaseRequest calls the generic PostPurchase builder with application/json body
func NewPostPurchaseRequest(server string, body PostPurchaseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPurchaseRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPurchaseRequestWithBody generates requests for PostPurchase with any type of body
func NewPostPurchaseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/purchase")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRestockSodaRequest calls the generic RestockSoda builder with application/json body
func NewRestockSodaRequest(server string, body RestockSodaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRestockSodaRequestWithBody(server, "application/json", bodyReader)
}

// NewRestockSodaRequestWithBody generates requests for RestockSoda with any type of body
func NewRestockSodaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/restock")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdatePriceRequest calls the generic UpdatePrice builder with application/json body
func NewUpdatePriceRequest(server string, body UpdatePriceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePriceRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdatePriceRequestWithBody generates requests for UpdatePrice with any type of body
func NewUpdatePriceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/updatePrice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVendingRequest calls the generic DeleteVending builder with application/json body
func NewDeleteVendingRequest(server string, body DeleteVendingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteVendingRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteVendingRequestWithBody generates requests for DeleteVending with any type of body
func NewDeleteVendingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vending")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVendingRequest calls the generic GetVending builder with application/json body
func NewGetVendingRequest(server string, body GetVendingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetVendingRequestWithBody(server, "application/json", bodyReader)
}

// NewGetVendingRequestWithBody generates requests for GetVending with any type of body
func NewGetVendingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vending")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostNewRequest calls the generic PostNew builder with application/json body
func NewPostNewRequest(server string, body PostNewJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostNewRequestWithBody(server, "application/json", bodyReader)
}

// NewPostNewRequestWithBody generates requests for PostNew with any type of body
func NewPostNewRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vending")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AuthLoginWithBodyWithResponse request with any body
	AuthLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthLoginResponse, error)

	AuthLoginWithResponse(ctx context.Context, body AuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthLoginResponse, error)

	// PostPurchaseWithBodyWithResponse request with any body
	PostPurchaseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPurchaseResponse, error)

	PostPurchaseWithResponse(ctx context.Context, body PostPurchaseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPurchaseResponse, error)

	// RestockSodaWithBodyWithResponse request with any body
	RestockSodaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RestockSodaResponse, error)

	RestockSodaWithResponse(ctx context.Context, body RestockSodaJSONRequestBody, reqEditors ...RequestEditorFn) (*RestockSodaResponse, error)

	// UpdatePriceWithBodyWithResponse request with any body
	UpdatePriceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePriceResponse, error)

	UpdatePriceWithResponse(ctx context.Context, body UpdatePriceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePriceResponse, error)

	// DeleteVendingWithBodyWithResponse request with any body
	DeleteVendingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteVendingResponse, error)

	DeleteVendingWithResponse(ctx context.Context, body DeleteVendingJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteVendingResponse, error)

	// GetVendingWithBodyWithResponse request with any body
	GetVendingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVendingResponse, error)

	GetVendingWithResponse(ctx context.Context, body GetVendingJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVendingResponse, error)

	// PostNewWithBodyWithResponse request with any body
	PostNewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNewResponse, error)

	PostNewWithResponse(ctx context.Context, body PostNewJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNewResponse, error)
}

type AuthLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthTokenResponse
	JSON401      *MessageResponse
}

// Status returns HTTPResponse.Status
func (r AuthLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPurchaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PurchaseSodaResponse
	JSON402      *MessageResponse
}

// Status returns HTTPResponse.Status
func (r PostPurchaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPurchaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RestockSodaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RestockResponse
	JSON404      *MessageResponse
}

// Status returns HTTPResponse.Status
func (r RestockSodaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RestockSodaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdatePriceResp
	JSON404      *MessageResponse
}

// Status returns HTTPResponse.Status
func (r UpdatePriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVendingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MessageResponse
	JSON404      *MessageResponse
}

// Status returns HTTPResponse.Status
func (r DeleteVendingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVendingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVendingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VendingMachineResponse
	JSON404      *MessageResponse
}

// Status returns HTTPResponse.Status
func (r GetVendingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVendingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostNewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MessageResponse
	JSON409      *MessageResponse
}

// Status returns HTTPResponse.Status
func (r PostNewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostNewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AuthLoginWithBodyWithResponse request with arbitrary body returning *AuthLoginResponse
func (c *ClientWithResponses) AuthLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthLoginResponse, error) {
	rsp, err := c.AuthLoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthLoginResponse(rsp)
}

func (c *ClientWithResponses) AuthLoginWithResponse(ctx context.Context, body AuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthLoginResponse, error) {
	rsp, err := c.AuthLogin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthLoginResponse(rsp)
}

// PostPurchaseWithBodyWithResponse request with arbitrary body returning *PostPurchaseResponse
func (c *ClientWithResponses) PostPurchaseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPurchaseResponse, error) {
	rsp, err := c.PostPurchaseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPurchaseResponse(rsp)
}

func (c *ClientWithResponses) PostPurchaseWithResponse(ctx context.Context, body PostPurchaseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPurchaseResponse, error) {
	rsp, err := c.PostPurchase(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPurchaseResponse(rsp)
}

// RestockSodaWithBodyWithResponse request with arbitrary body returning *RestockSodaResponse
func (c *ClientWithResponses) RestockSodaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RestockSodaResponse, error) {
	rsp, err := c.RestockSodaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRestockSodaResponse(rsp)
}

func (c *ClientWithResponses) RestockSodaWithResponse(ctx context.Context, body RestockSodaJSONRequestBody, reqEditors ...RequestEditorFn) (*RestockSodaResponse, error) {
	rsp, err := c.RestockSoda(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRestockSodaResponse(rsp)
}

// UpdatePriceWithBodyWithResponse request with arbitrary body returning *UpdatePriceResponse
func (c *ClientWithResponses) UpdatePriceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePriceResponse, error) {
	rsp, err := c.UpdatePriceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePriceResponse(rsp)
}

func (c *ClientWithResponses) UpdatePriceWithResponse(ctx context.Context, body UpdatePriceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePriceResponse, error) {
	rsp, err := c.UpdatePrice(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePriceResponse(rsp)
}

// DeleteVendingWithBodyWithResponse request with arbitrary body returning *DeleteVendingResponse
func (c *ClientWithResponses) DeleteVendingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteVendingResponse, error) {
	rsp, err := c.DeleteVendingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVendingResponse(rsp)
}

func (c *ClientWithResponses) DeleteVendingWithResponse(ctx context.Context, body DeleteVendingJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteVendingResponse, error) {
	rsp, err := c.DeleteVending(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVendingResponse(rsp)
}

// GetVendingWithBodyWithResponse request with arbitrary body returning *GetVendingResponse
func (c *ClientWithResponses) GetVendingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetVendingResponse, error) {
	rsp, err := c.GetVendingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVendingResponse(rsp)
}

func (c *ClientWithResponses) GetVendingWithResponse(ctx context.Context, body GetVendingJSONRequestBody, reqEditors ...RequestEditorFn) (*GetVendingResponse, error) {
	rsp, err := c.GetVending(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVendingResponse(rsp)
}

// PostNewWithBodyWithResponse request with arbitrary body returning *PostNewResponse
func (c *ClientWithResponses) PostNewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNewResponse, error) {
	rsp, err := c.PostNewWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNewResponse(rsp)
}

func (c *ClientWithResponses) PostNewWithResponse(ctx context.Context, body PostNewJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNewResponse, error) {
	rsp, err := c.PostNew(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNewResponse(rsp)
}

// ParseAuthLoginResponse parses an HTTP response from a AuthLoginWithResponse call
func ParseAuthLoginResponse(rsp *http.Response) (*AuthLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest MessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostPurchaseResponse parses an HTTP response from a PostPurchaseWithResponse call
func ParsePostPurchaseResponse(rsp *http.Response) (*PostPurchaseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPurchaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PurchaseSodaResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest MessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	}

	return response, nil
}

// ParseRestockSodaResponse parses an HTTP response from a RestockSodaWithResponse call
func ParseRestockSodaResponse(rsp *http.Response) (*RestockSodaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RestockSodaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RestockResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest MessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdatePriceResponse parses an HTTP response from a UpdatePriceWithResponse call
func ParseUpdatePriceResponse(rsp *http.Response) (*UpdatePriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdatePriceResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest MessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteVendingResponse parses an HTTP response from a DeleteVendingWithResponse call
func ParseDeleteVendingResponse(rsp *http.Response) (*DeleteVendingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteVendingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest MessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetVendingResponse parses an HTTP response from a GetVendingWithResponse call
func ParseGetVendingResponse(rsp *http.Response) (*GetVendingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVendingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VendingMachineResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest MessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostNewResponse parses an HTTP response from a PostNewWithResponse call
func ParsePostNewResponse(rsp *http.Response) (*PostNewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostNewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest MessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authenticate user and issue JWT
	// (POST /auth/login)
	AuthLogin(ctx echo.Context) error
	// Purchase Soda from vending machine
	// (POST /purchase)
	PostPurchase(ctx echo.Context) error
	// Restock a soda
	// (POST /restock)
	RestockSoda(ctx echo.Context) error
	// Update the price of a soda
	// (PUT /updatePrice)
	UpdatePrice(ctx echo.Context) error
	// Delete Slot And Return Sodas
	// (DELETE /vending)
	DeleteVending(ctx echo.Context) error
	// Get vending machine slots
	// (GET /vending)
	GetVending(ctx echo.Context) error
	// Add New Soda and Vending Slot
	// (POST /vending)
	PostNew(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthLogin(ctx)
	return err
}

// PostPurchase converts echo context to params.
func (w *ServerInterfaceWrapper) PostPurchase(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPurchase(ctx)
	return err
}

// RestockSoda converts echo context to params.
func (w *ServerInterfaceWrapper) RestockSoda(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RestockSoda(ctx)
	return err
}

// UpdatePrice converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePrice(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdatePrice(ctx)
	return err
}

// DeleteVending converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteVending(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteVending(ctx)
	return err
}

// GetVending converts echo context to params.
func (w *ServerInterfaceWrapper) GetVending(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetVending(ctx)
	return err
}

// PostNew converts echo context to params.
func (w *ServerInterfaceWrapper) PostNew(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNew(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/login", wrapper.AuthLogin)
	router.POST(baseURL+"/purchase", wrapper.PostPurchase)
	router.POST(baseURL+"/restock", wrapper.RestockSoda)
	router.PUT(baseURL+"/updatePrice", wrapper.UpdatePrice)
	router.DELETE(baseURL+"/vending", wrapper.DeleteVending)
	router.GET(baseURL+"/vending", wrapper.GetVending)
	router.POST(baseURL+"/vending", wrapper.PostNew)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xbW3Mct3L+K8gkVX4ZLUmJF5FPkcs+jlyxoljyOQ+OH7BAzwxIDDDEZXeHp/TfU93A",
	"XPYm8aJK5Y3cnWkA3V9/fcP+sxC27awBE3xx88/CwX0EH360UgF98C6G5vfxwx4/EtYEMAH/5F2nleBB",
	"WXNy663Bz7xooOX4V+dsBy5kSR33fm2dxL9D30FxU/jglKmLsti88sF2WtUNiVWyuCkuN/XVdfegesfv",
	"HoovX8oienCGt/BYCV2jzfqB16/XZ8t18QVF4PmUA1nc/DmJK6e9/VUOku3yFkRIb0nwwqkOj1ncFFkd",
	"zFbsjyyCcSPZxyyEBctqCIyzYO/AsMrZloUGmO99gHbBii9l8QHWfwcjlak/aRu+j4a9tvTOvzmoipvi",
	"X08m256kd/zJbNFiVyH0/mM08AHWbJUEMXyJrZXWjEvJODOwZt5KPPzWoT+PfzPl2TIqHZgyjLM171lo",
	"OP2HL1QxRAesjTqoTgMJ80xww6wQseunb+Zb8EmtH6MTDffwyUr+Qm0+BWn2TDRvVXVb1dfnF6TXjvdt",
	"XrSyruWhuCkqbXkoRv2a2C7BHZF478/1qaoeToW6W+5jd8RtWuWQ0b6Uxe/ggxV33wddT9EHSHeqrsLy",
	"bf3mYkX6uI/cBBX6mQRlAtRHFXC1ObftFdc+3N02RxUwij2igT86yQN8dErA/+Hxz6JaPbh+Le5PuyUd",
	"38CaNvFsPFy5q9XtpluvbHctj6pjXOaIOr475TxFK7fN6W3l7t05XF2aI0d4DPt8CtxI7iQxh62YtvYO",
	"aSB2jBMXnCBlLDK9+c4aP8Wyz0jJv+dPX3BwovbHntx1VfsAl8vLcNfbdKRvnhI3Cybk/TAfhQDvq6gX",
	"7HcI0RnPOPv1H59zkCEGbaMPbAksepADnaIc69RDEtMAl+AYx5d/BO7ADUHKOubj0iMqTGDvPr5nORfw",
	"ibvTY2AE73zUPIDHZRxTEsgDKQR24FrlvbLGlwyMj474GQQyOqcTDHFhIO+Wi0YZ+MGzKhqBm+RaoZYX",
	"jGzFVlwriQsoz7RqVQBZsgQcfN/BK76tqthZw2DTKdcvMCb87Jx1aPIXmBtQxmPNfeG5uFvJN7aqKvVI",
	"c390dqUkeCYhcKXJfoko8Eh8aWNgtAmPNrDRBHAgmUwaRoV2zqJ+8V9bMW7mNlyw9wH1J8Gr2gClKNx7",
	"5QOTsAKNR/VkQTDyFdrVI36Sbat+WELw6CFLp82UrOJCaRV4wGfuoxJ3SUxVgQhqBSw4G5cafGMtPoNg",
	"Up4Nfsl8cFFQwFdG6IgaGIQzYWXKrDhrYsvNKwdc8qUG1oL3vIaE+qTIJXjao+EkzVb0X96lrSogRSnj",
	"0VR4umBZZ71XKM+Btzqiqj2zjnGR/jQAMilLWOdABJKpvI+wYD/2TGjgTvdM2LaNhrBk6rx534FQlRK+",
	"pJdGENKpwTTciLzjdx/f/4DOxJeoyeRIDejOs5YrEzhlSb61NjS4bXBpe6zSdk0A/y1p4wmsBhvedjpB",
	"+29cadQYSkEx9OGK60iCsqaLm+K9IU9kwgHBgmuPmEPUykS2nxJHsd+Gdw7K+a8OXEI1pqcaAsgZu2n0",
	"WRR2zBPbSfhjfLFu2+jO7m4buan9I30R6a4GA06JEWkjYBVSZ6VhQ8BBW0WjVuA817pnWdkZU7sQJ14O",
	"jbOxbtCh0fp/Vy5ErhlmrCzHZ/ZbIkVyYUKfWUHPAmzo0TkzZDYVWoEJu86FSXN2q0HFw4GQnwmniW98",
	"ydbcGWVqX5IHmJ7Z0IBjDjSsuAnbq6LfoXcQnS9h5gEp8nA8NUdLVNatMVgTqre9OMk7xE0ZV8nB6FVh",
	"jVAeWAUgl1zcDQdHDQlrfGzBlYwrmbycSVjGulamLvPG8fNEo/iaAx918EgTdsBjOnkdkwx8igIcBd8x",
	"MPoAnV/slhrfIaEQDTf18/PD+9u783t/ubSgrm7JGzEJ+lY1iHsvHu0TXT4xW3M/c9mSDES1HmK44Z4t",
	"AQyTyndgPMhdWI5Mn7E3kPX4QhJEzG96ljTDHGU9IFPykgw4vBkcNz7R4oL9jHkHJL/RGlm7t9FNMpO8",
	"fynmBdKLzaehCnYF7tH1TWze3p31FxdXy9BeDjXCfz+1Slptbu9vV7fxXt7G1CSxWj5Zyv062Ndvlpf1",
	"Q8vjI0nyE7gVBms0xpizcHFn7FqDrLEspUxhBhQ0GqqbUpTB69A/5RA60ZZc3kYf8H0MgBLGRoKV/AcM",
	"3CswwbqerVVocpK7k0wOlMJVi5sKu98zLltlFFJUsM6XmW/yDlqSzMD7FOYmzrFmII/hGDnpKjOmR+Kg",
	"slPONqsxzfIjpmFDZExyEpsKG7VkxlICz6Wk5C6hmHdcYGJA2W+iql2XolwbzbF1MAoAYyqme9Zyg8Fs",
	"3FbJOs1T8p/bLtPZkluPKYjtgmq5zm604krnfIXIcFZnvzDTfnGlzC8beb7ayKuOi9vBJV4o8qEzZ1fq",
	"4m1nrt8mctU2fHhC7Xu6lK3n9zWYpg/P8DBhTaWG6LvrVh0eLmNuciyyKh/z0GS4r/vLoRC8gyhyDdW2",
	"IBWudsA1JlpWbqg/qN4gv8YdJUf2oHVyISXgaIhIKX07JvR0Cuo5csI1SLbsc/2DWkjkXuZPYKVs9Omr",
	"KUwZWOueeQjDF2N5wFMk6bgj+lqBWylYD2vj0/TUyFB524P3kSMfcMEVOFX1M2bYdi0uRHT46bCAA2Gd",
	"9GRBqjgGfyVfy0lizhG/Q+yi/ilBNUDrn9RBHmHMneP9EfC/0aK6Nt36Hpqz+5Ru2MD1o8NTKzZn/EHc",
	"1W+uO/PY9smEpVwkasrSqbrcNDx6qk53TbzflZhx5ZEqkoJWIsShXV1m+HPvrVAUCraa1eVo6llWnQCa",
	"QkIKF4NfjhUEeeZYcgMD7vtZX0U4FZTgmkkeeMnA8CW5WCroKfZsgzNY1vI7yLvAkANCUfuGOai5ox0P",
	"aZ8v96JD8rlZxN7zY8867oISUVOlHD0gYyGwp9iYohJlDCgUv0z1jB97e8Gy+wgu+ZCILvlntoc/Yr1U",
	"lWbcIpo+5ZR4d57TOfC0HN8Kb6lEGc8/D/ItBI5KRhpukKKRo0o2E4zFhKqVQYMieATX1ilUIp5xZXVs",
	"Ue/MRiNg0FvaK2otlYo2p1Yj9fl06In1do5cMq61XU9G37OwaKzCBYtytwDJG3y0W/rV6cX9eX/2Rqwf",
	"Xhd7LrgbGDHDPRgxMUKTqj6hph4bUdsLb9ZX1eXtUizT6kmTzw7yb93qItRXG3V27e4zy6ig8T3CzR7p",
	"bLXT92H1E1TKgM896a9kqyVGdwwEKQKhmUumgmfC+lCylm9UG1s2jDoSgAYfmNHFHoaEi4LyV+uSjw3p",
	"6eR6gxPnrmEmr7Fzy5kH3mqkl2HTY35xAEHWP3/g1bx5EG8lXJytNt6TPVu+eXIlcy1UZc439rqpVZdQ",
	"IUTsFMhPjy6HnzGsWtdvTt9eX51dXPj7q23szDGyC6HDwtT1plnK26s7I67y6I866Cr0n3CjSdmpe/8u",
	"hgb/W9J/fxsU/+s/PheZ+XC59O20fBNClwQjLQyZAxe0B2i50jSuAeP6y3+v8f+FsG0xOHDxK0cG+g/8",
	"viiL6PBxetpAWFt35+nxgz2Eb7a7uqERzplXLU0aJAOzUs4aChFbaEb8jj1RU6f0lLNVXoXY/FCy62PX",
	"WRf8rPszUjl1fbZnCuUQBCiCJyeZVYGzHIEagpjjDU+mGDkQPJ5wnmjjYaIHZPOpEV8erVO3O/Sz4Aib",
	"TlsHeYC+NUdJ5cKgkT3umWLa0YAsog+2BTdvs/gF+wWQfrhDA5HebXRDxzI3uFPnZbf6numc3pO94a0S",
	"AxGVs50gLp3NLaY8Rzpgn8X/mGLmct/AWFEWmAomUJ4tThenFIM6MLxTmK/SR2XR8dCQr53gaifa1ori",
	"Wpd5bhfdVAnIzirU27S/PCnzbKV4zgvj/N7IcPlkwf7otiZ9eyBUIQ0f8uivZOtGiWZ77Dcf7aUBmjJf",
	"m+wpP472UhHz7GldAzSPbHhOsjuF+ZrCvIhXAVze7f7ATnlmAFfjrp/ad5i1E3zmAwfuIG8QK7hgkYdQ",
	"h8YGXNHmwWdKH1956iFbiT5f7WiTVantzdn56VnuhVPmmrqMW20pZYb5z3wv1CZHPdlosmESDkd8v5d5",
	"kPufBJ1ydr2qPxaLtm5gnexev9odab8+PT0uKD93sj/3/lIW56dn335zd7JEsSi2Lcc8bT6iHrwS6RgV",
	"wVIECrz2xc2fxbbqi79QzsmQVx93qXeYy/opkx0b0MmLRGM9mMSyy367iTd0GUYvS6/kCzOMt2i0BNrh",
	"M+WHdh6an45SbbW5SSzo1HVI7RQ/73K/z22CLA82Ik1Ipt2kjI5qmNTUniFu6M0M2l+w94YJngauyvhY",
	"VUogrIcFEnZfH8Ju52zbha0xxtSBme9x0sOcvIbAm/beNb2nqhI2HTgFyOu2mkfEMWkdY0lSU4qcealp",
	"Pp2U60CAWuHDSReHfOej9WGYszzHffaugz3Lfw5OesiFXr/UhQbRKVbRTcEdqp15Edox+05OPo67zs9Y",
	"+4P/RucbUeGg02CUbxJQqZ5IHcZ555Dm3emTfsfFqLyZ+9lYqiTQyXKn6MDyNjfIkT2py6D70X9S8ztt",
	"ZMuHtA3oQ7kdnqTmRjqGEBtyQrXXys74riDdDdgrjdSs/JLUJsr3DtrhAuIc0GN1NOZFngflqzyWxxdH",
	"FKPXZL8V/SGE5wlUrjCfDPADN/yeBfHdQRih+/yl6M5SMz/M48GEwikexGmGQLiO306yUnzYx/Sc6ahF",
	"lQBNJLV1Y2Un9aSpdYAa0+Ylx2TCGiah5UaWRN6Zq9KoGFnWZiuj8Vc5E/pxLxbteYiB9dB8ni7JZq/Y",
	"ihhp+8r4wE3QfclU2+Vah2s9QH1s0S3Y57GBLdKIbISpz/PveaPcp7ghbNuCyXddxr50cNSwx8x7BvBD",
	"KJ6Nf56D4t1bms+C8O4I6vtAOEk9hKRvwTkzb8KwhgBH85uhze+gtSuuD7AvIaicd0+l8lgbKROnAIyY",
	"dGBdzY162KroFuyn7VE7LYUsS3K3h5eVMnTJZKrBIiUbDsb7PrPe8nTTa9aKmlWQmXunsdTX2New2L0K",
	"9tU4I4Ex6dkNZNPZDuDxJ1J4Lv2eg8gjF2WfBcw9gH0XYKYjMtwhe2dkvhRKeYT/GjTLooZwqAkenAKa",
	"N9K9LAcNGI9m1Sr91gHpZmeIMeEmdzBzXjzOP1LvoxwSgrH9vXO1KN8DyVDZuvio5B6/U4tluKI4DCxe",
	"tfwujc6GscV8VrE/ucsMPuawiz0M/QLh/wmAjgz8vg+OfoF930oDwa+C6EjBJtFc029AqIiiTrZL+6Fl",
	"5iiaDSz2wzhsuiFgrrhTEOi+9zj22aOWfJ18ulg0XfhKsf/R0xoTg1M5tO+N6JRRdC8kEd6sL6/t0IIc",
	"AWcSx86FUANyGuL5nB0HZ2UUw4A/JQj0ybwhf7gXMw3CHLQ0Ue464HrYQE5pD/8GB7MltMD4s5oxRnhM",
	"WIaf8ixpWCUVTZ+wREy/uXmPNSsyeh5H5L7aNKofr4aNPxNapoG+nNaQ4FIhOP1SCl/FpxbsYE34AdbP",
	"ccrjP7ra98uzZxL79Yu7KlKyD7BOFSGqb+hgDiOEo0nHbFBQ3Py5PSL4868vf3353wAAAP//KkJ/lu43",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
